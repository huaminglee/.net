<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DictSeg</name>
    </assembly>
    <members>
        <member name="T:KTDictSeg.CSimpleDictSeg">
            <summary>
            简单字典分词
            </summary>
        </member>
        <member name="F:KTDictSeg.CSimpleDictSeg.m_Dict">
            <summary>
            字典
            </summary>
        </member>
        <member name="F:KTDictSeg.CSimpleDictSeg.m_DictMgr">
            <summary>
            字典管理
            </summary>
        </member>
        <member name="F:KTDictSeg.CSimpleDictSeg.m_UnknownWordsDict">
            <summary>
            未登录词统计字典
            用于统计未登录词的出现频率和词性。
            目前主要统计未知词性的未登录词和
            未知姓名
            </summary>
        </member>
        <member name="F:KTDictSeg.CSimpleDictSeg.m_UnknownWordsDictMgr">
            <summary>
            未登录词字典管理
            </summary>
        </member>
        <member name="M:KTDictSeg.CSimpleDictSeg.LoadConfig(System.String)">
            <summary>
            从配置文件加载配置
            </summary>
            <param name="fileName">配置文件名</param>
        </member>
        <member name="M:KTDictSeg.CSimpleDictSeg.SaveConfig(System.String)">
            <summary>
            保存配置到配置文件
            </summary>
            <param name="fileName">配置文件名</param>
        </member>
        <member name="M:KTDictSeg.CSimpleDictSeg.SelectByFreq(System.Collections.Generic.List{FTAlgorithm.T_WordInfo},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})">
            <summary>
            按词频优先进行选择
            </summary>
            <param name="words"></param>
            <param name="pre"></param>
            <param name="cur"></param>
            <returns></returns>
        </member>
        <member name="M:KTDictSeg.CSimpleDictSeg.MergeFloat(System.Collections.ArrayList,System.Int32,System.Int32@)">
            <summary>
            合并浮点数
            </summary>
            <param name="words"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:KTDictSeg.CSimpleDictSeg.MergeEmail(System.Collections.ArrayList,System.Int32,System.Int32@)">
            <summary>
            合并Email
            </summary>
            <param name="words"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:KTDictSeg.CSimpleDictSeg.MergeEnglishSpecialWord(FTAlgorithm.CExtractWords,System.Collections.ArrayList,System.Int32,System.Int32@)">
            <summary>
            合并英文专用词。
            如果字典中有英文专用词如U.S.A, C++.C#等
            需要对初步分词后的英文和字母进行合并
            </summary>
            <param name="words"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:KTDictSeg.CSimpleDictSeg.LoadStopwordsDict(System.String,System.String)">
            <summary>
            从停用词字典中加载停用词
            停用词字典的格式：
            文本文件格式，一个词占一行
            </summary>
            <param name="chsFileName">中文停用词</param>
            <param name="engFileName">英文停用词</param>
            <remarks>对文件存取的异常不做异常处理，由调用者进行异常处理</remarks>
        </member>
        <member name="M:KTDictSeg.CSimpleDictSeg.SaveChsStopwordDict(System.String)">
            <summary>
            将中文停用词保存到文件中 
            </summary>
            <param name="fileName">要保存文件名</param>
            <remarks>对文件存取的异常不做异常处理，由调用者进行异常处理</remarks>
        </member>
        <member name="M:KTDictSeg.CSimpleDictSeg.SaveEngStopwordDict(System.String)">
            <summary>
            将英文停用词保存到文件中 
            </summary>
            <param name="fileName">要保存文件名</param>
            <remarks>对文件存取的异常不做异常处理，由调用者进行异常处理</remarks>
        </member>
        <member name="M:KTDictSeg.CSimpleDictSeg.AddChsStopword(System.String)">
            <summary>
            增加一个中文停用词
            </summary>
            <param name="word"></param>
        </member>
        <member name="M:KTDictSeg.CSimpleDictSeg.DelChsStopword(System.String)">
            <summary>
            删除一个中文停用词
            </summary>
            <param name="word"></param>
        </member>
        <member name="M:KTDictSeg.CSimpleDictSeg.AddEngStopword(System.String)">
            <summary>
            增加一个英文停用词
            </summary>
            <param name="word"></param>
        </member>
        <member name="M:KTDictSeg.CSimpleDictSeg.DelEngStopword(System.String)">
            <summary>
            删除一个英文停用词
            </summary>
            <param name="word"></param>
        </member>
        <member name="M:KTDictSeg.CSimpleDictSeg.LoadSingleWords">
            <summary>
            加载单字词
            </summary>
        </member>
        <member name="M:KTDictSeg.CSimpleDictSeg.LoadDict(System.Boolean)">
            <summary>
            加载字典
            </summary>
            <param name="clear">是否清除词频</param>
        </member>
        <member name="M:KTDictSeg.CSimpleDictSeg.AppendDict(System.String,System.Boolean)">
            <summary>
            附加二进制字典
            </summary>
            <param name="fileName">二进制字典文件名称</param>
            <param name="clear">是否清除词频</param>
        </member>
        <member name="M:KTDictSeg.CSimpleDictSeg.AppendDict(System.String)">
            <summary>
            附加二进制字典
            </summary>
            <param name="fileName">二进制字典文件名称</param>
        </member>
        <member name="M:KTDictSeg.CSimpleDictSeg.AppendTextDict(System.String,System.Boolean)">
            <summary>
            附加文本字典
            </summary>
            <param name="fileName">文本字典文件名称</param>
            <param name="clear">是否清除词频</param>
        </member>
        <member name="M:KTDictSeg.CSimpleDictSeg.AppendTextDict(System.String)">
            <summary>
            附加文本字典
            </summary>
            <param name="fileName">文本字典文件名称</param>
        </member>
        <member name="M:KTDictSeg.CSimpleDictSeg.AppendTextDict(System.String,System.Boolean,System.Int32,System.String)">
            <summary>
            附加文本字典,指定缺省词性
            </summary>
            <param name="fileName">文本字典文件名称</param>
            <param name="clear">是否清除词频</param>
            <param name="defaultPos">缺省词性</param>
            <param name="encoding">编码方式,utf-8, gbk, gb2312</param>
        </member>
        <member name="M:KTDictSeg.CSimpleDictSeg.PreSegment(System.String)">
            <summary>
            预分词
            </summary>
            <param name="str">要分词的句子</param>
            <param name="multiSelect">多元分词选项</param>
            <returns>预分词后的字符串输出</returns>
        </member>
        <member name="M:KTDictSeg.CSimpleDictSeg.RecoverUnknowWord(System.Collections.Generic.List{System.String})">
            <summary>
            召回未登录词
            </summary>
            <returns></returns>
        </member>
        <member name="M:KTDictSeg.CSimpleDictSeg.SegmentNoStopWordMultiSelect(System.String)">
            <summary>
            多元分词，不屏蔽停用词
            </summary>
            <param name="str">输入文本</param>
            <returns></returns>
        </member>
        <member name="M:KTDictSeg.CSimpleDictSeg.SegmentNoStopWord(System.String)">
            <summary>
            分词,不屏蔽停用词
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:KTDictSeg.CSimpleDictSeg.SaveDictOnTime">
            <summary>
            定期保存最新的字典和统计信息
            </summary>
        </member>
        <member name="M:KTDictSeg.CSimpleDictSeg.SegmentToWordInfos(System.String)">
            <summary>
            分词并输出单词信息列表 
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:KTDictSeg.CSimpleDictSeg.Segment(System.String)">
            <summary>
            分词只输出单词列表
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="P:KTDictSeg.CSimpleDictSeg.UnknownWordsThreshold">
            <summary>
            未登录词阈值，当统计超过这个值时，自动将未登录词加入到
            字典中
            </summary>
        </member>
        <member name="P:KTDictSeg.CSimpleDictSeg.AutoInsertUnknownWords">
            <summary>
            自动插入超过统计阈值的未登录词
            </summary>
        </member>
        <member name="P:KTDictSeg.CSimpleDictSeg.FreqFirst">
            <summary>
            优先判断词频，
            如果一个长的单词由多个短的单词组成，而长的单词词频较低
            则忽略长的单词。
            如 中央酒店的词频比中央和酒店的词频都要低，则忽略中央酒店。
            </summary>
        </member>
        <member name="P:KTDictSeg.CSimpleDictSeg.AutoStudy">
            <summary>
            自动学习
            </summary>
        </member>
        <member name="P:KTDictSeg.CSimpleDictSeg.AutoSaveInterval">
            <summary>
            间隔多少秒自动保存最新的字典和统计信息，AutoStudy = true时有效
            </summary>
        </member>
        <member name="P:KTDictSeg.CSimpleDictSeg.MultiSelect">
            <summary>
            多元分词选项
            </summary>
        </member>
        <member name="P:KTDictSeg.CSimpleDictSeg.Redundancy">
            <summary>
            冗余度
            0 为最低冗余
            1 为中等冗余
            2 为最高冗余
            </summary>
        </member>
        <member name="P:KTDictSeg.CSimpleDictSeg.DictPath">
            <summary>
            字典文件所在路径
            </summary>
        </member>
        <member name="P:KTDictSeg.CSimpleDictSeg.UserDictName">
            <summary>
            用户字典名称
            </summary>
        </member>
        <member name="P:KTDictSeg.CSimpleDictSeg.LogFileName">
            <summary>
            日志文件名
            </summary>
        </member>
        <member name="P:KTDictSeg.CSimpleDictSeg.Pos">
            <summary>
            词性
            </summary>
        </member>
        <member name="P:KTDictSeg.CSimpleDictSeg.MatchName">
            <summary>
            是否匹配汉语人名
            </summary>
        </member>
        <member name="P:KTDictSeg.CSimpleDictSeg.MatchDirection">
            <summary>
            匹配方向
            默认为从左至右匹配,即正向匹配
            </summary>
        </member>
        <member name="P:KTDictSeg.CSimpleDictSeg.FilterStopWords">
            <summary>
            是否过滤停用词
            </summary>
        </member>
        <member name="T:KTDictSeg.IRule">
            <summary>
            规则接口
            </summary>
        </member>
        <member name="M:KTDictSeg.IRule.ProcRule(System.Collections.Generic.List{System.String},System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            处理规则
            </summary>
            <param name="preWords">预处理后的单词列表</param>
            <param name="index">当前要处理的词位于预处理后的单词列表中的位置</param>
            <param name="retWords">输出的单词列表</param>
            <returns>规则生效返回下一个要处理的Index位置，否则返回-1</returns>
        </member>
        <member name="T:FTAlgorithm.General.CGetCurrentDir">
            <summary>
            获取当前进程运行的工作路径名的类
            该类不运行被继承
            </summary>
        </member>
        <member name="P:FTAlgorithm.General.CGetCurrentDir.ProcessDirectory">
            <summary>
            进程的启动路径
            </summary>
        </member>
        <member name="P:FTAlgorithm.General.CGetCurrentDir.CurrentDirectory">
            <summary>
            获取设置当前的工作路径
            </summary>
        </member>
        <member name="T:FTAlgorithm.General.CDir">
            <summary>
            目录操作类
            </summary>
        </member>
        <member name="M:FTAlgorithm.General.CDir.CreateDirectory(System.String)">
            <summary>
            创建目录 
            </summary>
            <param name="dir">目录名</param>
        </member>
        <member name="M:FTAlgorithm.General.CDir.DirectoryExists(System.String)">
            <summary>
            目录是否存在
            </summary>
            <param name="dir">目录名</param>
            <returns>存在返回true</returns>
        </member>
        <member name="P:FTAlgorithm.General.CDir.SystemDirectory">
            <summary>
            获取系统目录的完全限定路径,路径名以"\"结尾
            例如，返回值为字符串“C:\WinNT\System32\”。
            </summary>
        </member>
        <member name="P:FTAlgorithm.General.CDir.SystemDriver">
            <summary>
            系统所在驱动器号
            </summary>
        </member>
        <member name="T:FTAlgorithm.General.CFile">
            <summary>
            文件操作类
            </summary>
        </member>
        <member name="M:FTAlgorithm.General.CFile.Move(System.String,System.String)">
            <summary>
            移动文件 
            </summary>
            <param name="oldFile"></param>
            <param name="newFile"></param>
        </member>
        <member name="M:FTAlgorithm.General.CFile.Copy(System.String,System.String)">
            <summary>
            拷贝文件
            </summary>
            <param name="oldFile"></param>
            <param name="newFile"></param>
        </member>
        <member name="M:FTAlgorithm.General.CFile.Delete(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:FTAlgorithm.General.CFile.Exists(System.String)">
            <summary>
            文件是否存在
            </summary>
            <param name="fileName">文件名</param>
            <returns>存在返回true</returns>
        </member>
        <member name="M:FTAlgorithm.General.CFile.GetFileLength(System.String)">
            <summary>
            获取文件大小
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:FTAlgorithm.General.CFile.GetLastWriteTime(System.String)">
            <summary>
            获取文件最后一次修改时间
            </summary>
            <param name="fileName">文件名</param>
            <returns>返回修改时间</returns>
        </member>
        <member name="M:FTAlgorithm.General.CFile.GetCreationTime(System.String)">
            <summary>
            获取文件创建时间
            </summary>
            <param name="fileName">文件名</param>
            <returns>返回创建时间</returns>
        </member>
        <member name="M:FTAlgorithm.General.CFile.ReadFileToStream(System.String)">
            <summary>
            把文件读取到内存流中
            </summary>
            <param name="FileName">文件名</param>
            <returns>内存流</returns>
            <exception cref="T:FTAlgorithm.General.CFileException">
            读入失败触发返回 ExceptionCode.FileReadFail异常
            </exception>
        </member>
        <member name="M:FTAlgorithm.General.CFile.ReadFileToChars(System.String,System.Char[]@,System.String)">
            <summary>
            文件读入到字符数组中
            </summary>
            <param name="FileName">文件名</param>
            <param name="buf">输出字符数组</param>
            <param name="Encode">
            编码方式 
            如 "gb2312" "utf-8"
            </param>        
            <exception cref="T:FTAlgorithm.General.CFileException">
            读入失败触发返回 ExceptionCode.FileReadFail异常
            </exception>
        </member>
        <member name="M:FTAlgorithm.General.CFile.ReadFileToString(System.String,System.String)">
            <summary>
            将文件读入到一个String对象中
            </summary>
            <param name="FileName">文件名</param>
            <param name="Encode">编码方式</param>
            <returns>String 对象</returns>
            <exception cref="T:FTAlgorithm.General.CFileException">
            读入失败触发返回 ExceptionCode.FileReadFail异常
            </exception>
        </member>
        <member name="M:FTAlgorithm.General.CFile.ReadFileToStringBuilder(System.String,System.String)">
            <summary>
            将文件读入到一个StringBuilder对象中
            </summary>
            <param name="FileName">文件名</param>
            <param name="Encode">编码方式</param>
            <returns>StringBuilder 对象</returns>
            <exception cref="T:FTAlgorithm.General.CFileException">
            读入失败触发返回 ExceptionCode.FileReadFail异常
            </exception>
        </member>
        <member name="M:FTAlgorithm.General.CFile.WriteStream(System.String,System.IO.MemoryStream)">
            <summary>
            将内存流输出到文件
            </summary>
            <param name="FileName">文件名</param>
            <param name="In">内存流</param>
            <exception cref="T:FTAlgorithm.General.CFileException">
            写入失败触发返回 ExceptionCode.FileReadFail异常
            </exception>
        </member>
        <member name="M:FTAlgorithm.General.CFile.WriteString(System.String,System.String,System.String)">
            <summary>
            将字符串拷贝到文件中
            </summary>
            <param name="str"></param>
            <param name="FileName"></param>
            <param name="Encode"></param>
            <remarks>
            调用该函数源文件将会被清空
            </remarks>
            <exception cref="T:FTAlgorithm.General.CFileException">
            写入失败触发返回 ExceptionCode.FileReadFail异常
            </exception>
        </member>
        <member name="M:FTAlgorithm.General.CFile.WriteLine(System.String,System.String,System.String)">
            <summary>
            向文件末尾追加一行
            </summary>
            <param name="str">要追加的字符串</param>
            <param name="FileName">文件名</param>
            <param name="Encode">编码方式</param>
            <exception cref="T:FTAlgorithm.General.CFileException">
            写入失败触发返回 ExceptionCode.FileReadFail异常
            </exception>
        </member>
        <member name="M:FTAlgorithm.General.CFile.GetAbsPath(System.String,System.String)">
            <summary>
            获取绝对路径
            </summary>
            <param name="BasePath">基准路径</param>
            <param name="RelPath">相对路径</param>
            <returns>绝对路径，绝对路径以"\"结尾</returns>
            <exception>
            ArgumentException
            SecurityException
            ArgumentNullException
            NotSupportedException
            PathTooLongException
            具体见Path.GetFullPath的帮助
            </exception>
        </member>
        <member name="M:FTAlgorithm.General.CFile.GetFileName(System.String)">
            <summary>
            获取纯文件名
            </summary>
            <param name="PathName"></param>
            <returns>纯文件名</returns>
            <exception>
            ArgumentException
            SecurityException
            ArgumentNullException
            NotSupportedException
            PathTooLongException
            具体见Path.GetFileName的帮助
            </exception>        
        </member>
        <member name="M:FTAlgorithm.General.CFile.GetFileNameWithoutExt(System.String)">
            <summary>
            获取不带扩展名的纯文件名
            </summary>
            <param name="PathName"></param>
            <returns>不带扩展名的纯文件名</returns>
            <exception>
            ArgumentException
            SecurityException
            ArgumentNullException
            NotSupportedException
            PathTooLongException
            具体见Path.GetFileNameWithoutExtension的帮助
            </exception>        
        </member>
        <member name="M:FTAlgorithm.General.CFile.GetExt(System.String)">
            <summary>
            获取文件扩展名
            </summary>
            <param name="PathName"></param>
            <returns>
            文件扩展名，扩展名包括前面的.
            如输入 a.txt ，返回 .txt
            </returns>
            <exception>
            ArgumentException
            SecurityException
            ArgumentNullException
            NotSupportedException
            PathTooLongException
            具体见Path.GetExtension的帮助
            </exception>        
        </member>
        <member name="M:FTAlgorithm.General.CFile.GetPath(System.String)">
            <summary>
            获取文件的路径名
            </summary>
            <param name="PathName"></param>
            <returns>返回文件的路径，不包括文件名。路径以"\"结尾</returns>
            <exception>
            ArgumentException
            SecurityException
            ArgumentNullException
            NotSupportedException
            PathTooLongException
            具体见Path.GetDirectoryName的帮助
            </exception>        
        </member>
        <member name="M:FTAlgorithm.General.CFile.WriteFileByBase64String(System.String,System.String)">
            <summary>
            把Base64编码的字符串转换为实际数据存入文件
            </summary>
            <param name="fileName">文件名</param>
            <param name="data">Base64编码的字符串</param>
            <remarks>文件操作可能触发异常</remarks>
        </member>
        <member name="M:FTAlgorithm.General.CFile.GetBase64StringFromFile(System.String)">
            <summary>
            把文件内容读入Base64编码的字符串中
            </summary>
            <param name="fileName">文件名</param>
            <returns>Base64编码的字符串</returns>
            <remarks>文件操作可能触发异常</remarks>
        </member>
        <member name="M:FTAlgorithm.General.CFile.GetFileVersionNo(System.String)">
            <summary>
            获取文件版本号
            </summary>
            <param name="fileName">文件名</param>
            <returns>如果文件有版本号，返回版本号，否则返回null</returns>
        </member>
        <member name="F:FTAlgorithm.T_Direction.LeftToRight">
            <summary>
            从左到右
            </summary>
        </member>
        <member name="F:FTAlgorithm.T_Direction.RightToLeft">
            <summary>
            从右到左
            </summary>
        </member>
        <member name="T:FTAlgorithm.T_WordInfo">
            <summary>
            单词信息
            </summary>
        </member>
        <member name="F:FTAlgorithm.T_WordInfo.Word">
            <summary>
            单词
            </summary>
        </member>
        <member name="F:FTAlgorithm.T_WordInfo.Position">
            <summary>
            单词首字符在全文中的位置
            </summary>
        </member>
        <member name="F:FTAlgorithm.T_WordInfo.Rank">
            <summary>
            单词的权重级别
            </summary>
        </member>
        <member name="F:FTAlgorithm.T_WordInfo.Tag">
            <summary>
            单词对应的标记
            </summary>
        </member>
        <member name="T:FTAlgorithm.CExtractWords">
            <summary>
            从全文中提取指定的单词，及其位置
            </summary>
        </member>
        <member name="M:FTAlgorithm.CExtractWords.GameTree(System.Collections.Generic.List{FTAlgorithm.T_WordInfo},System.Collections.Generic.List{System.Int32},System.Boolean,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Boolean)">
            <summary>
            博弈树
            </summary>
            <param name="words"></param>
            <param name="nodes"></param>
            <param name="init"></param>
            <param name="begin"></param>
            <param name="end"></param>
            <param name="spaceNum"></param>
            <param name="deep"></param>
            <param name="multiSelect">多元分词选项</param>
            <returns></returns>
        </member>
        <member name="M:FTAlgorithm.CExtractWords.ExtractFullTextMaxMatch(System.String,System.Boolean,System.Int32)">
            <summary>
            最大匹配提取全文中所有匹配的单词
            </summary>
            <param name="fullText">全文</param>
            <param name="multiSelect">多元分词选项</param>
            <param name="redundancy">冗余度</param>
            <returns>返回T_WordInfo[]数组，如果没有找到一个匹配的单词，返回长度为0的数组</returns>
        </member>
        <member name="M:FTAlgorithm.CExtractWords.ExtractFullText(System.String)">
            <summary>
            提取全文
            </summary>
            <param name="fullText">全文</param>
            <returns>返回T_WordInfo[]数组，如果没有找到一个匹配的单词，返回长度为0的数组</returns>
        </member>
        <member name="P:FTAlgorithm.CExtractWords.HitTable">
            <summary>
            Get the hit table
            </summary>
        </member>
        <member name="P:FTAlgorithm.CExtractWords.MatchDirection">
            <summary>
            匹配方向
            </summary>
        </member>
        <member name="T:KTDictSeg.T_ChsNameWordTraffic">
            <summary>
            中文人名统计
            </summary>
        </member>
        <member name="F:KTDictSeg.T_ChsNameWordTraffic.Word">
            <summary>
            单词
            </summary>
        </member>
        <member name="F:KTDictSeg.T_ChsNameWordTraffic.Before">
            <summary>
            单词在人名前出现的次数
            </summary>
        </member>
        <member name="F:KTDictSeg.T_ChsNameWordTraffic.After">
            <summary>
            单词在人名后出现的次数
            </summary>
        </member>
        <member name="T:KTDictSeg.T_ChsNameTraffic">
            <summary>
            人名统计
            </summary>
        </member>
        <member name="F:KTDictSeg.T_ChsNameTraffic.BeforeWordCount">
            <summary>
            出现在人名前的单词总数
            </summary>
        </member>
        <member name="F:KTDictSeg.T_ChsNameTraffic.BeforeCount">
            <summary>
            人名前单词出现次数总和
            </summary>
        </member>
        <member name="F:KTDictSeg.T_ChsNameTraffic.AfterWordCount">
            <summary>
            出现在人名后的单词总数
            </summary>
        </member>
        <member name="F:KTDictSeg.T_ChsNameTraffic.AfterCount">
            <summary>
            人名后单词出现次数总和
            </summary>
        </member>
        <member name="T:KTDictSeg.CChsNameTraffic">
            <summary>
            中文人名统计实现
            </summary>
        </member>
        <member name="M:KTDictSeg.CChsNameTraffic.CompareTwoWords(System.String,System.String)">
            <summary>
            判断两个词的统计值，第二个比第一个大返回true
            </summary>
            <param name="fst"></param>
            <param name="sec"></param>
            <returns></returns>
        </member>
        <member name="M:KTDictSeg.CChsNameTraffic.MaybeNameByBefore(System.String)">
            <summary>
            根据名字前的单词判断该名字是否可能是汉字名
            </summary>
            <param name="beforeWord"></param>
            <returns></returns>
        </member>
        <member name="T:KTDictSeg.MatchName">
            <summary>
            匹配姓名
            </summary>
        </member>
        <member name="F:KTDictSeg.MatchName.FAMILY_NAMES">
            <summary>
            没有明显歧异的姓氏
            </summary>
        </member>
        <member name="M:KTDictSeg.MatchName.ClearNameTraffic">
            <summary>
            清除姓名统计文件
            </summary>
        </member>
        <member name="M:KTDictSeg.MatchName.AddAfter(System.String)">
            <summary>
            加入姓名后缀
            </summary>
            <param name="word"></param>
        </member>
        <member name="M:KTDictSeg.MatchName.AddBefore(System.String)">
            <summary>
            加入姓名前缀
            </summary>
            <param name="word"></param>
        </member>
        <member name="M:KTDictSeg.MatchName.LoadNameTraffic(System.String)">
            <summary>
            加载姓名统计文件
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:KTDictSeg.MatchName.SaveNameTraffic(System.String)">
            <summary>
            保存姓名统计文件
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:KTDictSeg.MatchName.IsChineseName(System.String,System.String)">
            <summary>
            是否是中文名字
            </summary>
            <param name="familyName">姓</param>
            <param name="firstName">名</param>
            <returns>是返回true</returns>
        </member>
        <member name="M:KTDictSeg.MatchName.MatchFamilyNameInHead(System.Collections.Generic.List{System.String},System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            匹配姓位于单词首部的情况
            </summary>
            <param name="preWords"></param>
            <param name="index"></param>
            <param name="retWords"></param>
            <returns></returns>
        </member>
        <member name="M:KTDictSeg.MatchName.MatchFamilyNameInTailByTraffic(System.Collections.Generic.List{System.String},System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据统计结果匹配尾部是姓的情况
            </summary>
            <param name="preWords"></param>
            <param name="index"></param>
            <param name="retWords"></param>
            <returns></returns>
        </member>
        <member name="M:KTDictSeg.MatchName.MatchFamilyNameInTail(System.Collections.Generic.List{System.String},System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            匹配姓位于单词尾部的情况
            </summary>
            <param name="preWords"></param>
            <param name="index"></param>
            <param name="retWords"></param>
            <returns></returns>
        </member>
        <member name="M:KTDictSeg.MatchName.SimpleMatch(System.Collections.Generic.List{System.String},System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            简单匹配。
            判断第一个单词是不是姓，如果是，
            如果是单字姓，再看第二个单词是不是单子，
            如果是，看两个词是否可以组成双字姓。
            不是也一样按上面逻辑判断是否是双字姓。
            确认姓后，看前面的单词是否是高频姓名前缀，
            如果是，确认为姓名，看后面的单词是否是高频
            姓名后缀，如果是，直接返回姓，如果不是，后面
            单词为两个单字，则判断第二个单字是否是高频后缀
            不是，合并为一个名字，是只取第一个单子。
            如果前面不是高频姓名前缀，判断后面如果两个字之内
            是否有高频姓名后缀，有则确认为姓名。
            确认姓名后，对前后单词加入单词前后缀，并将姓名进行
            记录，等到一定出现频率后，将新的姓名加入词库。
            </summary>
            <param name="preWords"></param>
            <param name="index"></param>
            <param name="retWords"></param>
            <returns></returns>
        </member>
        <member name="P:KTDictSeg.MatchName.AutoStudy">
            <summary>
            是否自动学习
            </summary>
        </member>
        <member name="F:KTDictSeg.T_DictStruct.Word">
            <summary>
            单词
            </summary>
        </member>
        <member name="F:KTDictSeg.T_DictStruct.Pos">
            <summary>
            词性
            </summary>
        </member>
        <member name="F:KTDictSeg.T_DictStruct.Frequency">
            <summary>
            词频
            </summary>
        </member>
        <member name="M:KTDictSeg.Dict.LoadSingleWordFromFile(System.String)">
            <summary>
            从文件加载单字词
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:KTDictSeg.Dict.LoadFromTextDict(System.String)">
            <summary>
            从文本文件读取字典
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:KTDictSeg.Dict.LoadFromTextDict(System.String,System.Int32,System.String)">
            <summary>
            从文本文件读取字典,指定词性
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="T:KTDictSeg.MergeNumRule">
            <summary>
            合并数量词规则
            </summary>
        </member>
        <member name="F:DictManage.SearchWordResult.Word">
            <summary>
            单词
            </summary>
        </member>
        <member name="F:DictManage.SearchWordResult.SimilarRatio">
            <summary>
            相似度
            </summary>
        </member>
        <member name="T:DictManage.DictMgr">
            <summary>
            字典管理
            包括插入，修改，删除，搜索
            </summary>
        </member>
        <member name="M:DictManage.DictMgr.SearchByTraversal(System.String)">
            <summary>
            通过遍历方式搜索
            </summary>
            <returns></returns>
        </member>
        <member name="P:DictManage.DictMgr.Dict">
            <summary>
            字典
            </summary>
        </member>
        <member name="P:DictManage.DictMgr.Approximate">
            <summary>
            是否允许模糊查询
            </summary>
        </member>
        <member name="T:FTAlgorithm.General.CStream">
            <summary>
            对流操作
            </summary>
        </member>
        <member name="M:FTAlgorithm.General.CStream.ReadStreamToChars(System.IO.Stream,System.Char[]@,System.String)">
            <summary>
            将流数据读取到字符数组中
            </summary>
            <param name="input">输入的流数据</param>
            <param name="buf">输出字符数组</param>
            <param name="Encode">
            编码方式 
            如 "gb2312" "utf-8"
            </param>
        </member>
        <member name="M:FTAlgorithm.General.CStream.ReadStreamToString(System.IO.Stream,System.String@,System.String)">
            <summary>
            将流数据读取到字符数组中
            </summary>
            <param name="input">输入的流数据</param>
            <param name="str">输出字符串</param>
            <param name="Encode">
            编码方式 
            如 "gb2312" "utf-8"
            </param>
        </member>
        <member name="M:FTAlgorithm.General.CStream.ReadStreamToString(System.IO.Stream,System.String@,System.Text.Encoding)">
            <summary>
            将流数据读取到字符数组中
            </summary>
            <param name="input">输入的流数据</param>
            <param name="str">输出字符串</param>
            <param name="Encode">
            编码方式 
            如 "gb2312" "utf-8"
            </param>
        </member>
        <member name="M:FTAlgorithm.General.CStream.WriteStringToStream(System.String,System.String)">
            <summary>
            把字符串写入一个流中
            </summary>
            <param name="str">要写入的字符串</param>
            <returns>输出的流</returns>
            <param name="Encode">编码方式如 "gb2312" "utf-8"</param>
        </member>
        <member name="M:FTAlgorithm.General.CStream.WriteStringToStream(System.String,System.Text.Encoding)">
            <summary>
            把字符串写入一个流中
            </summary>
            <param name="str">要写入的字符串</param>
            <returns>输出的流</returns>
            <param name="Encode">编码方式如 "gb2312" "utf-8"</param>
        </member>
        <member name="T:FTAlgorithm.General.CSerialization">
            <summary>
            封装对对象的一系列序列化和反序列化操作
            采用二进制方式序列化和发序列化经实测
            比采用XML方式快将近20倍。但二进制方式
            兼容性和结构化都不好，使用者可根据实际情况
            自己选择。
            </summary>
        </member>
        <member name="M:FTAlgorithm.General.CSerialization.SerializeXml(System.Object,System.String)">
            <summary>
            序列化为XML格式的流数据
            </summary>
            <param name="Obj">要序列化的对象</param>
            <param name="Encode">XML的字符编码方式</param>
            <returns>序列化后的流数据</returns>
            <exception cref="T:System.NotImplementedException">
            当未在子类中重写该方法时，试图对该方法进行访问。
            </exception>
            <remarks>
            私有字段将不会被序列化，这是XML方式序列化的限制
            这一点一定要注意！
            </remarks>
            
            <example>
            struct TestStruct
            {
                public int a ;
            }
            
            TestStruct testOut ;
            test.a = 1 ;
            
            try
            {
                Stream s = CSerialization.SerializeXml(test,"utf-8")
            }
            catch
            {
            }
            
            TestStruct testIn ;
            
            try
            {
                CSerialization.DeserializeXml(s, out testIn);
            }
            catch
            {
            }
            </example>
        </member>
        <member name="M:FTAlgorithm.General.CSerialization.SerializeXml(System.Object)">
            <summary>
            将对象序列化为UTF-8类型的XML格式数据流
            </summary>
            <param name="Obj">要序列化的对象</param>
            <returns>序列化后的流数据</returns>
            <exception cref="T:System.NotImplementedException">
            当未在子类中重写该方法时，试图对该方法进行访问。
            </exception>
            
            <remarks>
            私有字段将不会被序列化，这是XML方式序列化的限制
            这一点一定要注意！
            </remarks>
            
            <example>
            struct TestStruct
            {
                public int a ;
            }
            
            TestStruct testOut ;
            test.a = 1 ;
            
            try
            {
                Stream s = CSerialization.SerializeXml(test)
            }
            catch
            {
            }
            
            TestStruct testIn ;
            
            try
            {
                CSerialization.DeserializeXml(s, out testIn);
            }
            catch
            {
            }
            </example>
        </member>
        <member name="M:FTAlgorithm.General.CSerialization.DeserializeXml(System.IO.Stream,System.Type)">
             <summary>
             将数据流按XML方式反序列化为对象
             </summary>
             <param name="In">数据流</param>
             <param name="ObjType">对象的类型</param>
             <returns>反序列化后的对象</returns>
             <exception cref="T:System.InvalidOperationException">
             反序列化期间发生错误。使用 InnerException 属性时可使用原始异常。 
             </exception>
                        TestXml Obj = new TestXml();
                        Obj.a = "中1局";
                        Obj.i = 100;
                        try
                        {
                             Stream In = General.CSerialization.SerializeXml(Obj);
                        }
                        catch
                        {
                        }
            
                        TestBinary Obj_expected = new TestBinary(); // TODO: 初始化为适当的值
                        Obj_expected.a = "中1局";
                        Obj_expected.i = 100;
            
                        TestXml Out = (TestXml) General.CSerialization.DeserializeXml(In, typeof(TestXml));
             <example>
             </example>
        </member>
        <member name="M:FTAlgorithm.General.CSerialization.SerializeBinary(System.Object)">
             <summary>
             将对象序列化为二进制流
             </summary>
             <param name="Obj">要序列化的对象</param>
             <returns>二进制流</returns>
             <exception cref="T:System.NotImplementedException">
             当未在子类中重写该方法时，试图对该方法进行访问。
             </exception>
             <remarks>
             对象必须使用 [Serializable] 属性声明
             </remarks>
             <example>
                        TestBinary Obj = new TestBinary();
                        Obj.a = "中1局";
                        Obj.i = 100;
                        Stream In = General.CSerialization.SerializeBinary(Obj);
            
                        TestBinary Obj_expected = new TestBinary(); // TODO: 初始化为适当的值
                        Obj_expected.a = "中1局";
                        Obj_expected.i = 100;
            
                        object obj;
                        General.CSerialization.DeserializeBinary(In, out obj);
                        TestBinary Out = (TestBinary)obj;
             </example>
        </member>
        <member name="M:FTAlgorithm.General.CSerialization.DeserializeBinary(System.IO.Stream,System.Object@)">
             <summary>
             将二进制流反序列化为对象
             </summary>
             <param name="In">二进制流</param>
             <param name="Obj">输出对象</param>
             <exception cref="T:System.InvalidOperationException">
             反序列化期间发生错误。使用 InnerException 属性时可使用原始异常。 
             </exception>
             <example>
                        TestBinary Obj = new TestBinary();
                        Obj.a = "中1局";
                        Obj.i = 100;
                        Stream In = General.CSerialization.SerializeBinary(Obj);
            
                        TestBinary Obj_expected = new TestBinary(); // TODO: 初始化为适当的值
                        Obj_expected.a = "中1局";
                        Obj_expected.i = 100;
            
                        object obj;
                        General.CSerialization.DeserializeBinary(In, out obj);
                        TestBinary Out = (TestBinary)obj;
             </example>
        </member>
        <member name="T:KTDictSeg.T_INNER_POS">
            <summary>
            内部使用的词性
            </summary>
        </member>
        <member name="F:KTDictSeg.T_INNER_POS.POS_D_A">
            <summary>
            形容词 形语素
            </summary>
        </member>
        <member name="F:KTDictSeg.T_INNER_POS.POS_D_B">
            <summary>
            区别词 区别语素
            </summary>
        </member>
        <member name="F:KTDictSeg.T_INNER_POS.POS_D_C">
            <summary>
            连词 连语素
            </summary>
        </member>
        <member name="F:KTDictSeg.T_INNER_POS.POS_D_D">
            <summary>
            副词 副语素
            </summary>
        </member>
        <member name="F:KTDictSeg.T_INNER_POS.POS_D_E">
            <summary>
            叹词 叹语素
            </summary>
        </member>
        <member name="F:KTDictSeg.T_INNER_POS.POS_D_F">
            <summary>
            方位词 方位语素
            </summary>
        </member>
        <member name="F:KTDictSeg.T_INNER_POS.POS_D_I">
            <summary>
            成语
            </summary>
        </member>
        <member name="F:KTDictSeg.T_INNER_POS.POS_D_L">
            <summary>
            习语
            </summary>
        </member>
        <member name="F:KTDictSeg.T_INNER_POS.POS_A_M">
            <summary>
            数词 数语素
            </summary>
        </member>
        <member name="F:KTDictSeg.T_INNER_POS.POS_D_MQ">
            <summary>
            数量词
            </summary>
        </member>
        <member name="F:KTDictSeg.T_INNER_POS.POS_D_N">
            <summary>
            名词 名语素
            </summary>
        </member>
        <member name="F:KTDictSeg.T_INNER_POS.POS_D_O">
            <summary>
            拟声词
            </summary>
        </member>
        <member name="F:KTDictSeg.T_INNER_POS.POS_D_P">
            <summary>
            介词
            </summary>
        </member>
        <member name="F:KTDictSeg.T_INNER_POS.POS_A_Q">
            <summary>
            量词 量语素
            </summary>
        </member>
        <member name="F:KTDictSeg.T_INNER_POS.POS_D_R">
            <summary>
            代词 代语素
            </summary>
        </member>
        <member name="F:KTDictSeg.T_INNER_POS.POS_D_S">
            <summary>
            处所词
            </summary>
        </member>
        <member name="F:KTDictSeg.T_INNER_POS.POS_D_T">
            <summary>
            时间词
            </summary>
        </member>
        <member name="F:KTDictSeg.T_INNER_POS.POS_D_U">
            <summary>
            助词 助语素
            </summary>
        </member>
        <member name="F:KTDictSeg.T_INNER_POS.POS_D_V">
            <summary>
            动词 动语素
            </summary>
        </member>
        <member name="F:KTDictSeg.T_INNER_POS.POS_D_W">
            <summary>
            标点符号
            </summary>
        </member>
        <member name="F:KTDictSeg.T_INNER_POS.POS_D_X">
            <summary>
            非语素字
            </summary>
        </member>
        <member name="F:KTDictSeg.T_INNER_POS.POS_D_Y">
            <summary>
            语气词 语气语素
            </summary>
        </member>
        <member name="F:KTDictSeg.T_INNER_POS.POS_D_Z">
            <summary>
            状态词
            </summary>
        </member>
        <member name="F:KTDictSeg.T_INNER_POS.POS_A_NR">
            <summary>
            人名
            </summary>
        </member>
        <member name="F:KTDictSeg.T_INNER_POS.POS_A_NS">
            <summary>
            地名
            </summary>
        </member>
        <member name="F:KTDictSeg.T_INNER_POS.POS_A_NT">
            <summary>
            机构团体
            </summary>
        </member>
        <member name="F:KTDictSeg.T_INNER_POS.POS_A_NX">
            <summary>
            外文字符
            </summary>
        </member>
        <member name="F:KTDictSeg.T_INNER_POS.POS_A_NZ">
            <summary>
            其他专名
            </summary>
        </member>
        <member name="F:KTDictSeg.T_INNER_POS.POS_D_H">
            <summary>
            前接成分
            </summary>
        </member>
        <member name="F:KTDictSeg.T_INNER_POS.POS_D_K">
            <summary>
            后接成分
            </summary>
        </member>
        <member name="F:KTDictSeg.T_INNER_POS.POS_UNK">
            <summary>
            未知词性
            </summary>
        </member>
        <member name="F:KTDictSeg.T_POS.POS_D_A">
            <summary>
            形容词 形语素
            </summary>
        </member>
        <member name="F:KTDictSeg.T_POS.POS_D_B">
            <summary>
            区别词 区别语素
            </summary>
        </member>
        <member name="F:KTDictSeg.T_POS.POS_D_C">
            <summary>
            连词 连语素
            </summary>
        </member>
        <member name="F:KTDictSeg.T_POS.POS_D_D">
            <summary>
            副词 副语素
            </summary>
        </member>
        <member name="F:KTDictSeg.T_POS.POS_D_E">
            <summary>
            叹词 叹语素
            </summary>
        </member>
        <member name="F:KTDictSeg.T_POS.POS_D_F">
            <summary>
            方位词 方位语素
            </summary>
        </member>
        <member name="F:KTDictSeg.T_POS.POS_D_I">
            <summary>
            成语
            </summary>
        </member>
        <member name="F:KTDictSeg.T_POS.POS_D_L">
            <summary>
            习语
            </summary>
        </member>
        <member name="F:KTDictSeg.T_POS.POS_A_M">
            <summary>
            数词 数语素
            </summary>
        </member>
        <member name="F:KTDictSeg.T_POS.POS_D_MQ">
            <summary>
            数量词
            </summary>
        </member>
        <member name="F:KTDictSeg.T_POS.POS_D_N">
            <summary>
            名词 名语素
            </summary>
        </member>
        <member name="F:KTDictSeg.T_POS.POS_D_O">
            <summary>
            拟声词
            </summary>
        </member>
        <member name="F:KTDictSeg.T_POS.POS_D_P">
            <summary>
            介词
            </summary>
        </member>
        <member name="F:KTDictSeg.T_POS.POS_A_Q">
            <summary>
            量词 量语素
            </summary>
        </member>
        <member name="F:KTDictSeg.T_POS.POS_D_R">
            <summary>
            代词 代语素
            </summary>
        </member>
        <member name="F:KTDictSeg.T_POS.POS_D_S">
            <summary>
            处所词
            </summary>
        </member>
        <member name="F:KTDictSeg.T_POS.POS_D_T">
            <summary>
            时间词
            </summary>
        </member>
        <member name="F:KTDictSeg.T_POS.POS_D_U">
            <summary>
            助词 助语素
            </summary>
        </member>
        <member name="F:KTDictSeg.T_POS.POS_D_V">
            <summary>
            动词 动语素
            </summary>
        </member>
        <member name="F:KTDictSeg.T_POS.POS_D_W">
            <summary>
            标点符号
            </summary>
        </member>
        <member name="F:KTDictSeg.T_POS.POS_D_X">
            <summary>
            非语素字
            </summary>
        </member>
        <member name="F:KTDictSeg.T_POS.POS_D_Y">
            <summary>
            语气词 语气语素
            </summary>
        </member>
        <member name="F:KTDictSeg.T_POS.POS_D_Z">
            <summary>
            状态词
            </summary>
        </member>
        <member name="F:KTDictSeg.T_POS.POS_A_NR">
            <summary>
            人名
            </summary>
        </member>
        <member name="F:KTDictSeg.T_POS.POS_A_NS">
            <summary>
            地名
            </summary>
        </member>
        <member name="F:KTDictSeg.T_POS.POS_A_NT">
            <summary>
            机构团体
            </summary>
        </member>
        <member name="F:KTDictSeg.T_POS.POS_A_NX">
            <summary>
            外文字符
            </summary>
        </member>
        <member name="F:KTDictSeg.T_POS.POS_A_NZ">
            <summary>
            其他专名
            </summary>
        </member>
        <member name="F:KTDictSeg.T_POS.POS_D_H">
            <summary>
            前接成分
            </summary>
        </member>
        <member name="F:KTDictSeg.T_POS.POS_D_K">
            <summary>
            后接成分
            </summary>
        </member>
        <member name="F:KTDictSeg.T_POS.POS_UNK">
            <summary>
            未知词性
            </summary>
        </member>
        <member name="T:KTDictSeg.T_POSBin">
            <summary>
            二元词性组合
            </summary>
        </member>
        <!-- 对于成员“T:KTDictSeg.CPOS”忽略有格式错误的 XML 注释 -->
        <member name="M:KTDictSeg.CPOS.AddWordPos(System.String,System.Int32)">
            <summary>
            增加单词的词性
            </summary>
            <param name="word">单词</param>
            <param name="pos">词性</param>
        </member>
        <member name="M:KTDictSeg.CPOS.IsUnknowOneCharWord(System.String)">
            <summary>
            是否是未登录的单字词
            </summary>
            <param name="word">词</param>
            <returns></returns>
        </member>
        <member name="M:KTDictSeg.CPOS.GetPos(System.String,System.Boolean@)">
            <summary>
            获取单词的词性
            </summary>
            <param name="word">单词</param>
            <param name="isReg">是否是已登录词</param>
            <returns>单词词性</returns>
        </member>
        <member name="T:FTAlgorithm.General.CRegex">
            <summary>
            正则表达式类
            封装一些常用的正则表达式解释函数
            </summary>
        </member>
        <member name="M:FTAlgorithm.General.CRegex.GetMatchStrings(System.String,System.String,System.Boolean,System.Collections.ArrayList@)">
            <summary>
            获取和正则表达式匹配的所有字符串的列表
            </summary>
            <param name="text">要转换的text文本</param>
            <param name="regx">正在表达式</param>
            <param name="ignoreCase">是否忽略大小写</param>
            <param name="output">输出字符串列表,必须已经实例化</param>
            <returns>如果没有任何匹配,返回false</returns>
        </member>
        <member name="M:FTAlgorithm.General.CRegex.GetSingleMatchStrings(System.String,System.String,System.Boolean,System.Collections.ArrayList@)">
            <summary>
            获取和正则表达式匹配的所有字符串的列表
            </summary>
            <param name="text">要转换的text文本</param>
            <param name="regx">正在表达式</param>
            <param name="ignoreCase">是否忽略大小写</param>
            <param name="output">输出字符串列表,必须已经实例化</param>
            <returns>如果没有任何匹配,返回false</returns>
        </member>
        <member name="M:FTAlgorithm.General.CRegex.GetSplitWithoutFirstStrings(System.String,System.String,System.Boolean,System.Collections.ArrayList@)">
            <summary>
            得分割方式的正则匹配字符串列表,并去除第一个匹配值
            </summary>
            <param name="text">要转换的text文本</param>
            <param name="regx">正在表达式</param>
            <param name="output">输出字符串列表,必须已经实例化</param>
            <param name="ignoreCase">是否忽略大小写</param>
            <returns>如果没有任何匹配,返回false</returns>
        </member>
        <member name="M:FTAlgorithm.General.CRegex.GetMatchSum(System.String,System.String,System.Boolean)">
            <summary>
            获取符合正则表达式的字符串之和
            </summary>
            <param name="text">要转换的text文本</param>
            <param name="regx">正在表达式</param>
            <param name="ignoreCase">是否忽略大小写</param>
            <returns>符合正则表达式的转换字符串之和</returns>
        </member>
        <member name="M:FTAlgorithm.General.CRegex.ReplaceMutiGroup(System.String,System.String,System.String,System.Boolean)">
             <summary>
             一次替换多个字符串
             </summary>
             <param name="Input">要替换的字符串</param>
             <param name="Expressions">
             正则表达式，按如下格式
             
             </param>
             <param name="ReplaceStr">
             按如下规则替换
             格式为"${Name1}Replace1${Name2}Replace2"
             </param>
             <param name="ignoreCase">是否忽略大小写</param>
             <returns>替换后的字符串</returns>
             <example>
                         string Input = "Test1,Test2;"; // TODO: 初始化为适当的值
                string RegularExpressions = "((Test1)|(Test2))"; // TODO: 初始化为适当的值
            
                string ReplaceStr = "${Test1}abc${Test2}def"; // TODO: 初始化为适当的值
            
                string expected = "abc,def;";
                string actual;
            
                actual = General.CRegex.ReplaceMutiGroup(Input, RegularExpressions, ReplaceStr);
            
                Assert.AreEqual(expected, actual, "General.CRegex.ReplaceMutiGroup 未返回所需的值。");
            
                Input = ";Test1,Test2"; // TODO: 初始化为适当的值
            
                RegularExpressions = "((Test1)|(Test2))"; // TODO: 初始化为适当的值
            
                ReplaceStr = "${Test1}abc${Test2}def"; // TODO: 初始化为适当的值
            
                expected = ";abc,def";
            
                actual = General.CRegex.ReplaceMutiGroup(Input, RegularExpressions, ReplaceStr);
            
                Assert.AreEqual(expected, actual, "General.CRegex.ReplaceMutiGroup 未返回所需的值。");
            
                Input = ";Test1,Test2"; // TODO: 初始化为适当的值
            
                RegularExpressions = "(Test1),(Test2)"; // TODO: 初始化为适当的值
            
                ReplaceStr = "${Test1}abc${Test2}def"; // TODO: 初始化为适当的值
            
                expected = ";abc,def";
            
                actual = General.CRegex.ReplaceMutiGroup(Input, RegularExpressions, ReplaceStr);
            
                Assert.AreEqual(expected, actual, "General.CRegex.ReplaceMutiGroup 未返回所需的值。");
            
            
             
             </example>
        </member>
        <member name="M:FTAlgorithm.General.CRegex.Split(System.String,System.String)">
            <summary>
            分割字符串
            </summary>
            <param name="Src">要分割的源字符串</param>
            <param name="SplitStr">分割符,可以是正则表达式</param>
            <returns>分割后的字符串集合</returns>
        </member>
        <member name="M:FTAlgorithm.General.CRegex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            分割字符串
            </summary>
            <param name="Src">要分割的源字符串</param>
            <param name="SplitStr">分割符,可以是正则表达式</param>
            <param name="option">分割选项</param>
            <returns>分割后的字符串集合</returns>
        </member>
        <member name="M:FTAlgorithm.General.CRegex.Replace(System.String,System.String,System.String,System.Boolean)">
            <summary>
            替换字符串
            </summary>
            <param name="text">要替换的字符串</param>
            <param name="regx">要替换的正则表达式</param>
            <param name="newText">替换成的字符串</param>
            <param name="ignoreCase">是否忽略大小写</param>
            <returns></returns>
        </member>
        <member name="M:KTDictSeg.PosBinRule.MatchNameInTail(System.String)">
            <summary>
            人名和前面的词词性匹配
            </summary>
            <param name="nextStr"></param>
            <returns></returns>
        </member>
        <member name="M:KTDictSeg.PosBinRule.MatchNameInHead(System.String)">
            <summary>
            人名和后面的词词性匹配
            </summary>
            <param name="str1"></param>
            <param name="str2"></param>
            <returns></returns>
        </member>
        <member name="T:FTAlgorithm.T_DfaUnit">
            <summary>
            有穷自动机
            单元结构
            </summary>
        </member>
        <member name="T:FTAlgorithm.CWordDfa">
            <summary>
            单词有穷自动机
            </summary>
        </member>
        <member name="M:FTAlgorithm.CWordDfa.TransCharEqual(System.Char,System.Char)">
            <summary>
            转义符号比较
            </summary>
            <param name="trans">转义符号</param>
            <param name="c">实际字符</param>
            <returns>相等返回true</returns>
        </member>
        <member name="M:FTAlgorithm.CWordDfa.GetTag(System.String)">
            <summary>
            获取单词对应的标签
            </summary>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="M:FTAlgorithm.CWordDfa.GetRank(System.String)">
            <summary>
            获取单词对应的权重级别
            </summary>
            <param name="word">单词</param>
            <returns>级别,未找到单词，返回0</returns>
        </member>
        <member name="M:FTAlgorithm.CWordDfa.GetLastMatchUnit(System.String,System.Int32@,System.Object)">
            <summary>
            遍历有穷自动机，获取最后一个和输入单词匹配的单元
            </summary>
            <param name="word">单词</param>
            <param name="pos">输出位置</param>
            <returns>最后一个匹配单元，如果第一个字符就不能匹配，返回null</returns>
        </member>
        <member name="M:FTAlgorithm.CWordDfa.InsertWordToDfa(System.String)">
            <summary>
            向有穷自动机输入单词
            </summary>
            <param name="word">单词</param>
            <param name="rank">单词的权重</param>
        </member>
        <member name="M:FTAlgorithm.CWordDfa.InsertWordToDfa(System.String,System.Object)">
            <summary>
            向有穷自动机输入单词
            </summary>
            <param name="word">单词</param>
            <param name="tag">标签</param>
            <returns>如果插入失败返回false</returns>
        </member>
        <member name="M:FTAlgorithm.CWordDfa.InsertWordToDfa(System.String,System.Int32,System.Object)">
            <summary>
            向有穷自动机输入单词
            </summary>
            <param name="word">单词</param>
            <param name="rank">单词的权重</param>
            <param name="tag">标签</param>
            <returns>如果插入失败返回false</returns>
        </member>
        <member name="T:FTAlgorithm.General.CFileException">
            <summary>
            文件操作异常
            </summary>
        </member>
        <member name="T:FTAlgorithm.General.CException">
            <summary>
            异常的统一基类
            该类是一个抽象类，必须要从这个类派生才可以使用
            </summary>
        </member>
        <member name="F:FTAlgorithm.General.CException.m_Type">
            <summary>
            异常类型
            </summary>
        </member>
        <member name="F:FTAlgorithm.General.CException.m_Reason">
            <summary>
            异常原因
            </summary>
        </member>
        <member name="F:FTAlgorithm.General.CException.m_InnerStackTrace">
            <summary>
            异常的内部堆栈回溯
            </summary>
        </member>
        <member name="F:FTAlgorithm.General.CException.m_ExceptionCode">
            <summary>
            异常代码
            </summary>
        </member>
        <member name="F:FTAlgorithm.General.CException.m_Exception">
            <summary>
            被引用的Exception
            </summary>
        </member>
        <member name="M:FTAlgorithm.General.CException.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:FTAlgorithm.General.CException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="strMessage">异常消息</param>
        </member>
        <member name="M:FTAlgorithm.General.CException.#ctor(FTAlgorithm.General.ExceptionCode,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="Code">异常代码</param>
            <param name="strMessage">异常消息</param>
            <param name="strReason">异常原因</param>
        </member>
        <member name="M:FTAlgorithm.General.CException.#ctor(FTAlgorithm.General.ExceptionCode,System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="Code">异常代码</param>
            <param name="strMessage">异常消息</param>
            <param name="e">从这个异常引入的异常</param>
            <example>
            try
            {
            ......
            
            }
            catch (Exception e)
            {
                CException E = new CException ("Example Exception", e);
                E.Raise();
            }
            </example>
        </member>
        <member name="M:FTAlgorithm.General.CException.Raise">
            <summary>
            触发异常
            </summary>
        </member>
        <member name="M:FTAlgorithm.General.CException.SetExceptionType">
            <summary>
            设置异常类型，该函数派生类必须要重载!
            </summary>
        </member>
        <member name="P:FTAlgorithm.General.CException.SqlErrorNumber">
            <summary>
            获取SQL错误NUMBER。 
            </summary>
        </member>
        <member name="P:FTAlgorithm.General.CException.ErrorCode">
            <summary>
            获取错误的 HRESULT。 
            </summary>
        </member>
        <member name="P:FTAlgorithm.General.CException.Type">
            <summary>
            异常类型
            上层应用处理异常时判断该类型，并做出相应处理
            </summary>
        </member>
        <member name="P:FTAlgorithm.General.CException.MessageInfo">
            <summary>
            异常信息
            </summary>
        </member>
        <member name="P:FTAlgorithm.General.CException.Reason">
            <summary>
            发生异常的原因，
            如果该异常是对其它异常的封装，
            则该属性填入其它异常的Message信息
            </summary>
        </member>
        <member name="P:FTAlgorithm.General.CException.InnerStackTrace">
            <summary>
            内部栈回溯信息，如果该异常是对其它异常的封装，
            则其它异常发生时的栈回溯被填入该属性。
            否则该属性为空字符串
            </summary>
        </member>
        <member name="P:FTAlgorithm.General.CException.InnerExp">
            <summary>
            内部异常，如果该异常是对其它异常的封装，
            则返回该其它异常。
            否则返回null
            </summary>
        </member>
        <member name="P:FTAlgorithm.General.CException.Code">
            <summary>
            异常代码
            </summary>
        </member>
        <member name="M:FTAlgorithm.General.CFileException.SetExceptionType">
            <summary>
            设置异常类型
            </summary>
        </member>
        <member name="M:FTAlgorithm.General.CFileException.#ctor(FTAlgorithm.General.ExceptionCode,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="Code">异常代码</param>
            <param name="strMessage">异常消息</param>
            <param name="strReason">异常原因</param>
        </member>
        <member name="M:FTAlgorithm.General.CFileException.#ctor(FTAlgorithm.General.ExceptionCode,System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="Code">异常代码</param>
            <param name="strMessage">异常消息</param>
            <param name="e">从这个异常引入的异常</param>
            <example>
            try
            {
            ......
            
            }
            catch (Exception e)
            {
                CDbException E = new CDbException ("Example Exception", e);
                E.Raise();
            }
            </example>
        </member>
        <member name="T:FTAlgorithm.General.ExceptionType">
            <summary>
            异常类型
            每个派生类都必须在这里定义异常类型
            </summary>
        </member>
        <member name="F:FTAlgorithm.General.ExceptionType.UnKownType">
            <summary>
            未知异常类型
            </summary>
        </member>
        <member name="F:FTAlgorithm.General.ExceptionType.DbException">
            <summary>
            数据库异常
            </summary>
        </member>
        <member name="F:FTAlgorithm.General.ExceptionType.FileException">
            <summary>
            文件异常
            </summary>
        </member>
        <member name="F:FTAlgorithm.General.ExceptionType.UserSubSystemException">
            <summary>
            用户子系统异常
            </summary>
        </member>
        <member name="T:FTAlgorithm.General.ExceptionCode">
            <summary>
            异常码，用于唯一定位异常
            </summary>
        </member>
        <member name="F:FTAlgorithm.General.ExceptionCode.UnKownCode">
            <summary>
            未知异常号
            </summary>
        </member>
        <member name="F:FTAlgorithm.General.ExceptionCode.DbConnectFail">
            <summary>
            连接数据库失败
            </summary>
        </member>
        <member name="F:FTAlgorithm.General.ExceptionCode.DbCloseFail">
            <summary>
            关闭数据库连接失败
            </summary>
        </member>
        <member name="F:FTAlgorithm.General.ExceptionCode.DbQueryFail">
            <summary>
            执行SQL查询失败
            </summary>
        </member>
        <member name="F:FTAlgorithm.General.ExceptionCode.DbExcuteFail">
            <summary>
            执行更改，插入，删除等非查询操作失败
            </summary>
        </member>
        <member name="F:FTAlgorithm.General.ExceptionCode.DbMakeInsertTextFail">
            <summary>
            生成插入语句时出错
            </summary>
        </member>
        <member name="F:FTAlgorithm.General.ExceptionCode.FileReadFail">
            <summary>
            生成插入语句时出错
            </summary>
        </member>
        <member name="F:FTAlgorithm.General.ExceptionCode.FileWriteFail">
            <summary>
            生成插入语句时出错
            </summary>
        </member>
        <member name="F:FTAlgorithm.General.ExceptionCode.NoCertificateType">
            <summary>
            没有证件号数据
            </summary>
        </member>
        <member name="F:FTAlgorithm.General.ExceptionCode.NoEmployment">
            <summary>
            没有职业类型数据
            </summary>
        </member>
        <member name="F:FTAlgorithm.General.ExceptionCode.NoFan">
            <summary>
            没有爱好数据
            </summary>
        </member>
        <member name="F:FTAlgorithm.General.ExceptionCode.NoSubscribeType">
            <summary>
            没有订阅类型数据
            </summary>
        </member>
        <member name="F:FTAlgorithm.General.ExceptionCode.UpdateSubscribeFail">
            <summary>
            修改订阅条件出错
            </summary>
        </member>
        <member name="F:FTAlgorithm.General.ExceptionCode.InvalidUserCheckNum">
            <summary>
            无效的校验码
            </summary>
        </member>
        <member name="F:FTAlgorithm.General.ExceptionCode.NoEnterPriseType">
            <summary>
            没有企业类型数据
            </summary>
        </member>
    </members>
</doc>
