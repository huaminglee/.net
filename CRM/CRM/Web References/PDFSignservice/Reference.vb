'------------------------------------------------------------------------------
' <auto-generated>
'     這段程式碼是由工具產生的。
'     執行階段版本:2.0.50727.3082
'
'     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
'     變更將會遺失。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'原始程式碼已由 Microsoft.VSDesigner 自動產生，版本 2.0.50727.3082。
'
Namespace PDFSignservice
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="PDFServiceSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class PDFService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private HelloWorldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteTemplateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetALLTemplateTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTemplateStreamOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddTemplateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpgradeTemplateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTemplatePagesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTemplateFiledsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddSignatureFieldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PutXMLFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetFieldValueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddWaterMaskOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFileStreamByIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreatePDFFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFileListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteFileIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddServerSignOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.CRM.My.MySettings.Default.CRM_PDFSignservice_PDFService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event HelloWorldCompleted As HelloWorldCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteTemplateCompleted As DeleteTemplateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetALLTemplateTypeCompleted As GetALLTemplateTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTemplateStreamCompleted As GetTemplateStreamCompletedEventHandler
        
        '''<remarks/>
        Public Event AddTemplateCompleted As AddTemplateCompletedEventHandler
        
        '''<remarks/>
        Public Event UpgradeTemplateCompleted As UpgradeTemplateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTemplatePagesCompleted As GetTemplatePagesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTemplateFiledsCompleted As GetTemplateFiledsCompletedEventHandler
        
        '''<remarks/>
        Public Event AddSignatureFieldCompleted As AddSignatureFieldCompletedEventHandler
        
        '''<remarks/>
        Public Event PutXMLFileCompleted As PutXMLFileCompletedEventHandler
        
        '''<remarks/>
        Public Event SetFieldValueCompleted As SetFieldValueCompletedEventHandler
        
        '''<remarks/>
        Public Event AddWaterMaskCompleted As AddWaterMaskCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFileStreamByIDCompleted As GetFileStreamByIDCompletedEventHandler
        
        '''<remarks/>
        Public Event CreatePDFFileCompleted As CreatePDFFileCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFileListCompleted As GetFileListCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteFileIDCompleted As DeleteFileIDCompletedEventHandler
        
        '''<remarks/>
        Public Event AddServerSignCompleted As AddServerSignCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HelloWorld", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function HelloWorld() As String
            Dim results() As Object = Me.Invoke("HelloWorld", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub HelloWorldAsync()
            Me.HelloWorldAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HelloWorldAsync(ByVal userState As Object)
            If (Me.HelloWorldOperationCompleted Is Nothing) Then
                Me.HelloWorldOperationCompleted = AddressOf Me.OnHelloWorldOperationCompleted
            End If
            Me.InvokeAsync("HelloWorld", New Object(-1) {}, Me.HelloWorldOperationCompleted, userState)
        End Sub
        
        Private Sub OnHelloWorldOperationCompleted(ByVal arg As Object)
            If (Not (Me.HelloWorldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HelloWorldCompleted(Me, New HelloWorldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteTemplate", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub DeleteTemplate(ByVal TemplateType As String)
            Me.Invoke("DeleteTemplate", New Object() {TemplateType})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteTemplateAsync(ByVal TemplateType As String)
            Me.DeleteTemplateAsync(TemplateType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteTemplateAsync(ByVal TemplateType As String, ByVal userState As Object)
            If (Me.DeleteTemplateOperationCompleted Is Nothing) Then
                Me.DeleteTemplateOperationCompleted = AddressOf Me.OnDeleteTemplateOperationCompleted
            End If
            Me.InvokeAsync("DeleteTemplate", New Object() {TemplateType}, Me.DeleteTemplateOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteTemplateOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteTemplateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteTemplateCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetALLTemplateType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetALLTemplateType() As PDFTemplateInfo()
            Dim results() As Object = Me.Invoke("GetALLTemplateType", New Object(-1) {})
            Return CType(results(0),PDFTemplateInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetALLTemplateTypeAsync()
            Me.GetALLTemplateTypeAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetALLTemplateTypeAsync(ByVal userState As Object)
            If (Me.GetALLTemplateTypeOperationCompleted Is Nothing) Then
                Me.GetALLTemplateTypeOperationCompleted = AddressOf Me.OnGetALLTemplateTypeOperationCompleted
            End If
            Me.InvokeAsync("GetALLTemplateType", New Object(-1) {}, Me.GetALLTemplateTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetALLTemplateTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetALLTemplateTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetALLTemplateTypeCompleted(Me, New GetALLTemplateTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTemplateStream", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTemplateStream(ByVal TemplateType As String) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("GetTemplateStream", New Object() {TemplateType})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTemplateStreamAsync(ByVal TemplateType As String)
            Me.GetTemplateStreamAsync(TemplateType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTemplateStreamAsync(ByVal TemplateType As String, ByVal userState As Object)
            If (Me.GetTemplateStreamOperationCompleted Is Nothing) Then
                Me.GetTemplateStreamOperationCompleted = AddressOf Me.OnGetTemplateStreamOperationCompleted
            End If
            Me.InvokeAsync("GetTemplateStream", New Object() {TemplateType}, Me.GetTemplateStreamOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTemplateStreamOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTemplateStreamCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTemplateStreamCompleted(Me, New GetTemplateStreamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddTemplate", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddTemplate(ByVal TemplateType As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal TemplateInfo() As Byte, ByVal TemplateDecription As String) As Integer
            Dim results() As Object = Me.Invoke("AddTemplate", New Object() {TemplateType, TemplateInfo, TemplateDecription})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddTemplateAsync(ByVal TemplateType As String, ByVal TemplateInfo() As Byte, ByVal TemplateDecription As String)
            Me.AddTemplateAsync(TemplateType, TemplateInfo, TemplateDecription, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddTemplateAsync(ByVal TemplateType As String, ByVal TemplateInfo() As Byte, ByVal TemplateDecription As String, ByVal userState As Object)
            If (Me.AddTemplateOperationCompleted Is Nothing) Then
                Me.AddTemplateOperationCompleted = AddressOf Me.OnAddTemplateOperationCompleted
            End If
            Me.InvokeAsync("AddTemplate", New Object() {TemplateType, TemplateInfo, TemplateDecription}, Me.AddTemplateOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddTemplateOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddTemplateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddTemplateCompleted(Me, New AddTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpgradeTemplate", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpgradeTemplate(ByVal TemplateType As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal TemplateInfo() As Byte) As Integer
            Dim results() As Object = Me.Invoke("UpgradeTemplate", New Object() {TemplateType, TemplateInfo})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpgradeTemplateAsync(ByVal TemplateType As String, ByVal TemplateInfo() As Byte)
            Me.UpgradeTemplateAsync(TemplateType, TemplateInfo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpgradeTemplateAsync(ByVal TemplateType As String, ByVal TemplateInfo() As Byte, ByVal userState As Object)
            If (Me.UpgradeTemplateOperationCompleted Is Nothing) Then
                Me.UpgradeTemplateOperationCompleted = AddressOf Me.OnUpgradeTemplateOperationCompleted
            End If
            Me.InvokeAsync("UpgradeTemplate", New Object() {TemplateType, TemplateInfo}, Me.UpgradeTemplateOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpgradeTemplateOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpgradeTemplateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpgradeTemplateCompleted(Me, New UpgradeTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTemplatePages", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTemplatePages(ByVal TempalteType As String) As Integer
            Dim results() As Object = Me.Invoke("GetTemplatePages", New Object() {TempalteType})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTemplatePagesAsync(ByVal TempalteType As String)
            Me.GetTemplatePagesAsync(TempalteType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTemplatePagesAsync(ByVal TempalteType As String, ByVal userState As Object)
            If (Me.GetTemplatePagesOperationCompleted Is Nothing) Then
                Me.GetTemplatePagesOperationCompleted = AddressOf Me.OnGetTemplatePagesOperationCompleted
            End If
            Me.InvokeAsync("GetTemplatePages", New Object() {TempalteType}, Me.GetTemplatePagesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTemplatePagesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTemplatePagesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTemplatePagesCompleted(Me, New GetTemplatePagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTemplateFileds", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTemplateFileds(ByVal TemplateType As String) As String()
            Dim results() As Object = Me.Invoke("GetTemplateFileds", New Object() {TemplateType})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTemplateFiledsAsync(ByVal TemplateType As String)
            Me.GetTemplateFiledsAsync(TemplateType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTemplateFiledsAsync(ByVal TemplateType As String, ByVal userState As Object)
            If (Me.GetTemplateFiledsOperationCompleted Is Nothing) Then
                Me.GetTemplateFiledsOperationCompleted = AddressOf Me.OnGetTemplateFiledsOperationCompleted
            End If
            Me.InvokeAsync("GetTemplateFileds", New Object() {TemplateType}, Me.GetTemplateFiledsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTemplateFiledsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTemplateFiledsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTemplateFiledsCompleted(Me, New GetTemplateFiledsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddSignatureField", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddSignatureField(ByVal fileID As String, ByVal mSignLocation() As SignLocation, ByVal SubFileDic As String) As Object
            Dim results() As Object = Me.Invoke("AddSignatureField", New Object() {fileID, mSignLocation, SubFileDic})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddSignatureFieldAsync(ByVal fileID As String, ByVal mSignLocation() As SignLocation, ByVal SubFileDic As String)
            Me.AddSignatureFieldAsync(fileID, mSignLocation, SubFileDic, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddSignatureFieldAsync(ByVal fileID As String, ByVal mSignLocation() As SignLocation, ByVal SubFileDic As String, ByVal userState As Object)
            If (Me.AddSignatureFieldOperationCompleted Is Nothing) Then
                Me.AddSignatureFieldOperationCompleted = AddressOf Me.OnAddSignatureFieldOperationCompleted
            End If
            Me.InvokeAsync("AddSignatureField", New Object() {fileID, mSignLocation, SubFileDic}, Me.AddSignatureFieldOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddSignatureFieldOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddSignatureFieldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddSignatureFieldCompleted(Me, New AddSignatureFieldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PutXMLFile", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PutXMLFile(ByVal XmlParam As String, ByVal TemplateType As String, ByVal SubFileDic As String) As String
            Dim results() As Object = Me.Invoke("PutXMLFile", New Object() {XmlParam, TemplateType, SubFileDic})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PutXMLFileAsync(ByVal XmlParam As String, ByVal TemplateType As String, ByVal SubFileDic As String)
            Me.PutXMLFileAsync(XmlParam, TemplateType, SubFileDic, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PutXMLFileAsync(ByVal XmlParam As String, ByVal TemplateType As String, ByVal SubFileDic As String, ByVal userState As Object)
            If (Me.PutXMLFileOperationCompleted Is Nothing) Then
                Me.PutXMLFileOperationCompleted = AddressOf Me.OnPutXMLFileOperationCompleted
            End If
            Me.InvokeAsync("PutXMLFile", New Object() {XmlParam, TemplateType, SubFileDic}, Me.PutXMLFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnPutXMLFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.PutXMLFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PutXMLFileCompleted(Me, New PutXMLFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetFieldValue", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetFieldValue(ByVal FileID As String, ByVal FieldName() As String, ByVal FieldValue() As String, ByVal SubFileDic As String) As String
            Dim results() As Object = Me.Invoke("SetFieldValue", New Object() {FileID, FieldName, FieldValue, SubFileDic})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetFieldValueAsync(ByVal FileID As String, ByVal FieldName() As String, ByVal FieldValue() As String, ByVal SubFileDic As String)
            Me.SetFieldValueAsync(FileID, FieldName, FieldValue, SubFileDic, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetFieldValueAsync(ByVal FileID As String, ByVal FieldName() As String, ByVal FieldValue() As String, ByVal SubFileDic As String, ByVal userState As Object)
            If (Me.SetFieldValueOperationCompleted Is Nothing) Then
                Me.SetFieldValueOperationCompleted = AddressOf Me.OnSetFieldValueOperationCompleted
            End If
            Me.InvokeAsync("SetFieldValue", New Object() {FileID, FieldName, FieldValue, SubFileDic}, Me.SetFieldValueOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetFieldValueOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetFieldValueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetFieldValueCompleted(Me, New SetFieldValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddWaterMask", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddWaterMask(ByVal FileID As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal ImageByte() As Byte, ByVal absoluteX As Decimal, ByVal absoluteY As Decimal, ByVal MaskWidth As Decimal, ByVal MaskHeight As Decimal, ByVal SubFileDic As String) As String
            Dim results() As Object = Me.Invoke("AddWaterMask", New Object() {FileID, ImageByte, absoluteX, absoluteY, MaskWidth, MaskHeight, SubFileDic})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddWaterMaskAsync(ByVal FileID As String, ByVal ImageByte() As Byte, ByVal absoluteX As Decimal, ByVal absoluteY As Decimal, ByVal MaskWidth As Decimal, ByVal MaskHeight As Decimal, ByVal SubFileDic As String)
            Me.AddWaterMaskAsync(FileID, ImageByte, absoluteX, absoluteY, MaskWidth, MaskHeight, SubFileDic, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddWaterMaskAsync(ByVal FileID As String, ByVal ImageByte() As Byte, ByVal absoluteX As Decimal, ByVal absoluteY As Decimal, ByVal MaskWidth As Decimal, ByVal MaskHeight As Decimal, ByVal SubFileDic As String, ByVal userState As Object)
            If (Me.AddWaterMaskOperationCompleted Is Nothing) Then
                Me.AddWaterMaskOperationCompleted = AddressOf Me.OnAddWaterMaskOperationCompleted
            End If
            Me.InvokeAsync("AddWaterMask", New Object() {FileID, ImageByte, absoluteX, absoluteY, MaskWidth, MaskHeight, SubFileDic}, Me.AddWaterMaskOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddWaterMaskOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddWaterMaskCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddWaterMaskCompleted(Me, New AddWaterMaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFileStreamByID", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFileStreamByID(ByVal FileID As String, ByVal SubFileDic As String, ByVal IsDelete As Boolean) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("GetFileStreamByID", New Object() {FileID, SubFileDic, IsDelete})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFileStreamByIDAsync(ByVal FileID As String, ByVal SubFileDic As String, ByVal IsDelete As Boolean)
            Me.GetFileStreamByIDAsync(FileID, SubFileDic, IsDelete, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFileStreamByIDAsync(ByVal FileID As String, ByVal SubFileDic As String, ByVal IsDelete As Boolean, ByVal userState As Object)
            If (Me.GetFileStreamByIDOperationCompleted Is Nothing) Then
                Me.GetFileStreamByIDOperationCompleted = AddressOf Me.OnGetFileStreamByIDOperationCompleted
            End If
            Me.InvokeAsync("GetFileStreamByID", New Object() {FileID, SubFileDic, IsDelete}, Me.GetFileStreamByIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFileStreamByIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFileStreamByIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFileStreamByIDCompleted(Me, New GetFileStreamByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreatePDFFile", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreatePDFFile(ByVal TemplateType As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal PDFStream() As Byte, ByVal mSignLocation() As SignLocation, ByVal SubFileDic As String) As String
            Dim results() As Object = Me.Invoke("CreatePDFFile", New Object() {TemplateType, PDFStream, mSignLocation, SubFileDic})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreatePDFFileAsync(ByVal TemplateType As String, ByVal PDFStream() As Byte, ByVal mSignLocation() As SignLocation, ByVal SubFileDic As String)
            Me.CreatePDFFileAsync(TemplateType, PDFStream, mSignLocation, SubFileDic, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreatePDFFileAsync(ByVal TemplateType As String, ByVal PDFStream() As Byte, ByVal mSignLocation() As SignLocation, ByVal SubFileDic As String, ByVal userState As Object)
            If (Me.CreatePDFFileOperationCompleted Is Nothing) Then
                Me.CreatePDFFileOperationCompleted = AddressOf Me.OnCreatePDFFileOperationCompleted
            End If
            Me.InvokeAsync("CreatePDFFile", New Object() {TemplateType, PDFStream, mSignLocation, SubFileDic}, Me.CreatePDFFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreatePDFFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreatePDFFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreatePDFFileCompleted(Me, New CreatePDFFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFileList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFileList(ByVal TemplateType As String, ByVal StartTime As String, ByVal EndTime As String) As SignPDFInfo()
            Dim results() As Object = Me.Invoke("GetFileList", New Object() {TemplateType, StartTime, EndTime})
            Return CType(results(0),SignPDFInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFileListAsync(ByVal TemplateType As String, ByVal StartTime As String, ByVal EndTime As String)
            Me.GetFileListAsync(TemplateType, StartTime, EndTime, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFileListAsync(ByVal TemplateType As String, ByVal StartTime As String, ByVal EndTime As String, ByVal userState As Object)
            If (Me.GetFileListOperationCompleted Is Nothing) Then
                Me.GetFileListOperationCompleted = AddressOf Me.OnGetFileListOperationCompleted
            End If
            Me.InvokeAsync("GetFileList", New Object() {TemplateType, StartTime, EndTime}, Me.GetFileListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFileListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFileListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFileListCompleted(Me, New GetFileListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteFileID", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub DeleteFileID(ByVal FileID As String, ByVal SubFileDic As String)
            Me.Invoke("DeleteFileID", New Object() {FileID, SubFileDic})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteFileIDAsync(ByVal FileID As String, ByVal SubFileDic As String)
            Me.DeleteFileIDAsync(FileID, SubFileDic, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteFileIDAsync(ByVal FileID As String, ByVal SubFileDic As String, ByVal userState As Object)
            If (Me.DeleteFileIDOperationCompleted Is Nothing) Then
                Me.DeleteFileIDOperationCompleted = AddressOf Me.OnDeleteFileIDOperationCompleted
            End If
            Me.InvokeAsync("DeleteFileID", New Object() {FileID, SubFileDic}, Me.DeleteFileIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteFileIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteFileIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteFileIDCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddServerSign", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddServerSign(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal SignPfx() As Byte, ByVal password As String, ByVal FileID As String, ByVal SignField As String, ByVal SubFiledic As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal ImageByte() As Byte, ByVal IsShowText As Boolean) As String
            Dim results() As Object = Me.Invoke("AddServerSign", New Object() {SignPfx, password, FileID, SignField, SubFiledic, ImageByte, IsShowText})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddServerSignAsync(ByVal SignPfx() As Byte, ByVal password As String, ByVal FileID As String, ByVal SignField As String, ByVal SubFiledic As String, ByVal ImageByte() As Byte, ByVal IsShowText As Boolean)
            Me.AddServerSignAsync(SignPfx, password, FileID, SignField, SubFiledic, ImageByte, IsShowText, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddServerSignAsync(ByVal SignPfx() As Byte, ByVal password As String, ByVal FileID As String, ByVal SignField As String, ByVal SubFiledic As String, ByVal ImageByte() As Byte, ByVal IsShowText As Boolean, ByVal userState As Object)
            If (Me.AddServerSignOperationCompleted Is Nothing) Then
                Me.AddServerSignOperationCompleted = AddressOf Me.OnAddServerSignOperationCompleted
            End If
            Me.InvokeAsync("AddServerSign", New Object() {SignPfx, password, FileID, SignField, SubFiledic, ImageByte, IsShowText}, Me.AddServerSignOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddServerSignOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddServerSignCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddServerSignCompleted(Me, New AddServerSignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class PDFTemplateInfo
        
        Private typeIDField As Integer
        
        Private typeNameField As String
        
        Private descriptionField As String
        
        Private recordCreateTimeField As Date
        
        '''<remarks/>
        Public Property TypeID() As Integer
            Get
                Return Me.typeIDField
            End Get
            Set
                Me.typeIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TypeName() As String
            Get
                Return Me.typeNameField
            End Get
            Set
                Me.typeNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Description() As String
            Get
                Return Me.descriptionField
            End Get
            Set
                Me.descriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RecordCreateTime() As Date
            Get
                Return Me.recordCreateTimeField
            End Get
            Set
                Me.recordCreateTimeField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class SignPDFInfo
        
        Private filePKIDField As Integer
        
        Private typeNameField As String
        
        Private preFileIDField As String
        
        Private fileGUIDField As String
        
        Private fileDicField As String
        
        Private recordCreateTimeField As Date
        
        '''<remarks/>
        Public Property FilePKID() As Integer
            Get
                Return Me.filePKIDField
            End Get
            Set
                Me.filePKIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TypeName() As String
            Get
                Return Me.typeNameField
            End Get
            Set
                Me.typeNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PreFileID() As String
            Get
                Return Me.preFileIDField
            End Get
            Set
                Me.preFileIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FileGUID() As String
            Get
                Return Me.fileGUIDField
            End Get
            Set
                Me.fileGUIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FileDic() As String
            Get
                Return Me.fileDicField
            End Get
            Set
                Me.fileDicField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RecordCreateTime() As Date
            Get
                Return Me.recordCreateTimeField
            End Get
            Set
                Me.recordCreateTimeField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class SignLocation
        
        Private signFieldField As String
        
        Private pageNumField As Integer
        
        Private positionField As String
        
        Private llxField As Integer
        
        Private llyField As Integer
        
        Private urxField As Integer
        
        Private uryField As Integer
        
        '''<remarks/>
        Public Property SignField() As String
            Get
                Return Me.signFieldField
            End Get
            Set
                Me.signFieldField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PageNum() As Integer
            Get
                Return Me.pageNumField
            End Get
            Set
                Me.pageNumField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Position() As String
            Get
                Return Me.positionField
            End Get
            Set
                Me.positionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property llx() As Integer
            Get
                Return Me.llxField
            End Get
            Set
                Me.llxField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property lly() As Integer
            Get
                Return Me.llyField
            End Get
            Set
                Me.llyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property urx() As Integer
            Get
                Return Me.urxField
            End Get
            Set
                Me.urxField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ury() As Integer
            Get
                Return Me.uryField
            End Get
            Set
                Me.uryField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub HelloWorldCompletedEventHandler(ByVal sender As Object, ByVal e As HelloWorldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HelloWorldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub DeleteTemplateCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetALLTemplateTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetALLTemplateTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetALLTemplateTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As PDFTemplateInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),PDFTemplateInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetTemplateStreamCompletedEventHandler(ByVal sender As Object, ByVal e As GetTemplateStreamCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTemplateStreamCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub AddTemplateCompletedEventHandler(ByVal sender As Object, ByVal e As AddTemplateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddTemplateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub UpgradeTemplateCompletedEventHandler(ByVal sender As Object, ByVal e As UpgradeTemplateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpgradeTemplateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetTemplatePagesCompletedEventHandler(ByVal sender As Object, ByVal e As GetTemplatePagesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTemplatePagesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetTemplateFiledsCompletedEventHandler(ByVal sender As Object, ByVal e As GetTemplateFiledsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTemplateFiledsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub AddSignatureFieldCompletedEventHandler(ByVal sender As Object, ByVal e As AddSignatureFieldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddSignatureFieldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub PutXMLFileCompletedEventHandler(ByVal sender As Object, ByVal e As PutXMLFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PutXMLFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub SetFieldValueCompletedEventHandler(ByVal sender As Object, ByVal e As SetFieldValueCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetFieldValueCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub AddWaterMaskCompletedEventHandler(ByVal sender As Object, ByVal e As AddWaterMaskCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddWaterMaskCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetFileStreamByIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetFileStreamByIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFileStreamByIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub CreatePDFFileCompletedEventHandler(ByVal sender As Object, ByVal e As CreatePDFFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreatePDFFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetFileListCompletedEventHandler(ByVal sender As Object, ByVal e As GetFileListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFileListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As SignPDFInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),SignPDFInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub DeleteFileIDCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub AddServerSignCompletedEventHandler(ByVal sender As Object, ByVal e As AddServerSignCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddServerSignCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
